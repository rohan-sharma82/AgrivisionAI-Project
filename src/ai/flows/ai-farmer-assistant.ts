
'use server';

/**
 * @fileOverview An AI assistant for providing farming advice.
 *
 * - getFarmingAdvice - A function that takes a question and returns farming advice.
 * - GetFarmingAdviceInput - The input type for the getFarmingAdvice function.
 * - GetFarmingAdviceOutput - The return type for the getFarmingAdvice function.
 */

import {ai} from '@/ai/genkit';
import {getWeatherForLocation, WeatherResponseSchema} from '@/ai/tools/weather';
import type { z as zod } from 'genkit';
import {z} from 'genkit';

type WeatherData = zod.infer<typeof WeatherResponseSchema>;

const GetFarmingAdviceInputSchema = z.object({
  query: z.string().describe('The question or request for farming advice.'),
  location: z.string().optional().describe('The user\'s location, e.g., "Delhi, India".'),
});
export type GetFarmingAdviceInput = z.infer<typeof GetFarmingAdviceInputSchema>;

const GetFarmingAdviceOutputSchema = z.object({
  advice: z
    .string()
    .describe('The farming advice provided by the AI assistant, formatted as bullet points.'),
});
export type GetFarmingAdviceOutput = z.infer<
  typeof GetFarmingAdviceOutputSchema
>;

export async function getFarmingAdvice(
  input: GetFarmingAdviceInput
): Promise<GetFarmingAdviceOutput> {
  return getFarmingAdviceFlow(input);
}


// Define a new input schema for the prompt that includes optional weather data.
const FarmingAdvicePromptSchema = z.object({
    query: z.string(),
    weather: WeatherResponseSchema.optional().describe("The current weather data, if available. This data should be used to provide context-aware advice."),
});

const farmingAdvicePrompt = ai.definePrompt({
    name: 'farmingAdvicePrompt',
    input: { schema: FarmingAdvicePromptSchema },
    output: { schema: GetFarmingAdviceOutputSchema },
    prompt: `You are an expert AI farming assistant. Your task is to provide helpful, practical, and actionable advice to a farmer based on their question.

    User's Question: "{{{query}}}"
    
    {{#if weather}}
    Current Weather Information for the user's location:
    - Condition: {{weather.current.condition.text}}
    - Temperature: {{weather.current.temp_c}}Â°C
    - Rain: {{weather.current.precip_mm}}mm
    - Wind: {{weather.current.wind_kph}} km/h
    
    You MUST use this live weather data to make your advice more relevant. For example, if it is raining or about to rain, you should advise against activities like spraying pesticides.
    {{else}}
    You are providing general advice as no location or weather data was provided.
    {{/if}}
    
    Provide your final response as a single 'advice' string. IMPORTANT: Format your advice as a list of bullet points (using '-' or '*') for easy readability.`,
});


const getFarmingAdviceFlow = ai.defineFlow(
  {
    name: 'getFarmingAdviceFlow',
    inputSchema: GetFarmingAdviceInputSchema,
    outputSchema: GetFarmingAdviceOutputSchema,
  },
  async (input) => {
    let weatherData: WeatherData | undefined;

    // Step 1: Explicitly check for location and call the tool if it exists.
    if (input.location) {
        try {
            // Call the tool directly with the location string.
            weatherData = await getWeatherForLocation(input.location);
        } catch (error) {
            console.error("Failed to fetch weather data:", error);
            // In case of a weather API error, proceed without weather data.
        }
    }
    
    // Step 2: Call the prompt with the user's query and the fetched weather data (if any).
    const { output } = await farmingAdvicePrompt({
        query: input.query,
        weather: weatherData,
    });

    if (!output || !output.advice) {
        throw new Error('No advice was generated by the AI.');
    }
    
    return { advice: output.advice };
  }
);
