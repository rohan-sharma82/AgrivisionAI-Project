
'use server';

/**
 * @fileOverview An AI assistant for providing farming advice.
 *
 * - getFarmingAdvice - A function that takes a question and returns farming advice.
 * - GetFarmingAdviceInput - The input type for the getFarmingAdvice function.
 * - GetFarmingAdviceOutput - The return type for the getFarmingAdvice function.
 */

import {ai} from '@/ai/genkit';
import {getWeatherForLocation} from '@/ai/tools/weather';
import {z} from 'genkit';

const GetFarmingAdviceInputSchema = z.object({
  query: z.string().describe('The question or request for farming advice.'),
  location: z.string().optional().describe('The user\'s location, e.g., "Delhi, India".'),
});
export type GetFarmingAdviceInput = z.infer<typeof GetFarmingAdviceInputSchema>;

const GetFarmingAdviceOutputSchema = z.object({
  advice: z
    .string()
    .describe('The farming advice provided by the AI assistant.'),
});
export type GetFarmingAdviceOutput = z.infer<
  typeof GetFarmingAdviceOutputSchema
>;

export async function getFarmingAdvice(
  input: GetFarmingAdviceInput
): Promise<GetFarmingAdviceOutput> {
  return getFarmingAdviceFlow(input);
}

const farmingAdvicePrompt = ai.definePrompt({
  name: 'getFarmingAdvicePrompt',
  tools: [getWeatherForLocation],
  prompt: `You are an experienced AI farming assistant. Your goal is to provide helpful and practical advice to the farmer based on their question.

User's Question: "{{{query}}}"

- If a user location is provided below, you MUST use the 'getWeatherForLocation' tool to fetch the current weather for that location. You MUST then incorporate the weather information into your advice. For example, if it is about to rain, you might advise against spraying pesticides.
- If the user location is NOT provided, you MUST provide general farming advice without using any tools.

User's Location: {{#if location}}{{{location}}}{{else}}Not Provided{{/if}}

Provide your final response as a single, concise 'advice' string.`,
  model: 'googleai/gemini-2.5-flash',
});


const getFarmingAdviceFlow = ai.defineFlow(
  {
    name: 'getFarmingAdviceFlow',
    inputSchema: GetFarmingAdviceInputSchema,
    outputSchema: GetFarmingAdviceOutputSchema,
  },
  async (input) => {
    const { output } = await farmingAdvicePrompt(input);

    if (!output || !output.advice) {
        throw new Error('No advice was generated by the AI.');
    }
    
    return { advice: output.advice };
  }
);
