
'use server';

/**
 * @fileOverview An AI assistant for providing farming advice.
 *
 * - getFarmingAdvice - A function that takes a question and returns farming advice.
 * - GetFarmingAdviceInput - The input type for the getFarmingAdvice function.
 * - GetFarmingAdviceOutput - The return type for the getFarmingAdvice function.
 */

import {ai} from '@/ai/genkit';
import {getWeatherForLocation} from '@/ai/tools/weather';
import {z} from 'genkit';

const GetFarmingAdviceInputSchema = z.object({
  query: z.string().describe('The question or request for farming advice.'),
  location: z.string().optional().describe('The user\'s location, e.g., "Delhi, India".'),
});
export type GetFarmingAdviceInput = z.infer<typeof GetFarmingAdviceInputSchema>;

const GetFarmingAdviceOutputSchema = z.object({
  advice: z
    .string()
    .describe('The farming advice provided by the AI assistant.'),
});
export type GetFarmingAdviceOutput = z.infer<
  typeof GetFarmingAdviceOutputSchema
>;

export async function getFarmingAdvice(
  input: GetFarmingAdviceInput
): Promise<GetFarmingAdviceOutput> {
  return getFarmingAdviceFlow(input);
}

const farmingAdvicePrompt = ai.definePrompt({
  name: 'getFarmingAdvicePrompt',
  tools: [getWeatherForLocation],
  prompt: `You are an experienced AI farming assistant. A farmer has asked the following question:

"{{{query}}}"

{{#if location}}
The user is located in {{{location}}}. Use the getWeatherForLocation tool to get the current weather and factor it into your advice. For example, if it's about to rain, you might advise against certain activities.
{{else}}
Provide general farming advice. Do not use any tools.
{{/if}}

Provide helpful and practical advice to the farmer. Focus on providing specific, actionable steps the farmer can take to improve their farming practices. Return the advice in a concise and easy-to-understand manner.`,
  model: 'googleai/gemini-2.5-flash',
});


const getFarmingAdviceFlow = ai.defineFlow(
  {
    name: 'getFarmingAdviceFlow',
    inputSchema: GetFarmingAdviceInputSchema,
    outputSchema: GetFarmingAdviceOutputSchema,
  },
  async (input) => {
    try {
      const { output } = await farmingAdvicePrompt(input);
      if (!output || !output.advice) {
        throw new Error('No advice was generated by the AI.');
      }
      return { advice: output.advice };
    } catch (e: any) {
      console.error(e);
      let errorMessage = "An unexpected error occurred. Please try again later.";
      if (e.message?.includes('INVALID_ARGUMENT')) {
        errorMessage = "There was a problem with the information sent to the AI. Please check if your question is clear and try again."
      } else if (e.message?.includes('503')) {
        errorMessage = "The AI service is temporarily overloaded. Please try again in a few moments.";
      }
      return {
        advice: `I encountered an issue processing your request. Here's what happened:\n\n**Error:** ${errorMessage}\n\nCould you please try rephrasing your question or try again in a little while?`
      };
    }
  }
);
